trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  aksResourceGroup: 'RG02'
  aksClusterName: 'RG02-AKS1'
  subscriptionId: 'aab3378c-ce10-4a02-a67f-bd35bc48e60f'
  objectId: '1a0227bc-6295-4d6a-9586-c13ec5c262f5'
  prometheusNamespace: 'monitoring'
  azureADClientId: 'cf968ae1-6deb-454f-8244-993b7c8a864f' # Substitua pelo Client ID da sua App Registration
  azureADTenantId: 'b7a7b567-4287-48aa-9755-ec5b5ec68021' # Substitua pelo Tenant ID da sua organização
  grafanaAdminPassword: 'admin' # Ou outra senha desejada
  grafanaAzureADClientSecret: '$(azureADClientSecretValue)' # Referência à variável secreta

stages:
- stage: DeployMonitoring
  jobs:
  - job: Deploy
    steps:
    - task: AzureCLI@2
      displayName: '🔧 Configurar AKS e instalar Prometheus/Grafana com Azure AD'
      inputs:
        azureSubscription: 'Terraform-automation'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e

          echo "🔐 Garantindo permissões de Cluster Admin..."
          az role assignment create \
            --assignee "$(objectId)" \
            --role "Azure Kubernetes Service Cluster Admin Role" \
            --scope /subscriptions/$(subscriptionId)/resourceGroups/$(aksResourceGroup)/providers/Microsoft.ContainerService/managedClusters/$(aksClusterName) \
            || echo "Permissão já atribuída ou já existente."

          echo "🔧 Acessando o cluster AKS..."
          az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing

          echo "🔎 Verificando contexto do kubectl..."
          kubectl config current-context
          kubectl cluster-info

          echo "📁 Criando namespace '$(prometheusNamespace)'..."
          kubectl create namespace $(prometheusNamespace) --dry-run=client -o yaml | kubectl apply -f -

          echo "📦 Adicionando repositórios Helm..."
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

          echo "📈 Instalando Prometheus..."
          helm upgrade --install prometheus prometheus-community/prometheus \
            --namespace $(prometheusNamespace) \
            --set server.service.type=LoadBalancer

          echo "📊 Instalando Grafana com autenticação Azure AD..."
          helm upgrade --install grafana grafana/grafana \
            --namespace $(prometheusNamespace) \
            --set adminPassword="$(grafanaAdminPassword)" \
            --set service.type=LoadBalancer \
            --set "grafana.ini.auth.azuread.enabled=true" \
            --set "grafana.ini.auth.azuread.client_id=$(azureADClientId)" \
            --set "grafana.ini.auth.azuread.client_secret=$(grafanaAzureADClientSecret)" \
            --set "grafana.ini.auth.azuread.tenant_id=$(azureADTenantId)" \
            --set "grafana.ini.auth.azuread.auth_url=https://login.microsoftonline.com/$(azureADTenantId)/oauth2/v2.0/authorize" \
            --set "grafana.ini.auth.azuread.token_url=https://login.microsoftonline.com/$(azureADTenantId)/oauth2/v2.0/token" \
            --set "grafana.ini.auth.azuread.allow_sign_up=true" \
            --set "grafana.ini.auth.azuread.auto_login=false" \
            --set "grafana.ini.auth.azuread.scopes=openid email profile"

          echo "⏳ Verificando recursos..."
          kubectl get all -n $(prometheusNamespace)
