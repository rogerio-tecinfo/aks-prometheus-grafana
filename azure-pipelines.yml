trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  aksResourceGroup: 'RG02'
  aksClusterName: 'RG02-AKS1'
  subscriptionId: 'aab3378c-ce10-4a02-a67f-bd35bc48e60f'
  objectId: '1a0227bc-6295-4d6a-9586-c13ec5c262f5'
  prometheusNamespace: 'monitoring'
  azureADClientId: '<seu-client-id>' # Substitua pelo Client ID da sua App Registration
  azureADTenantId: '<seu-tenant-id>' # Substitua pelo Tenant ID da sua organiza√ß√£o
  grafanaAdminPassword: 'admin' # Ou outra senha desejada
  azureADClientSecretValue: '$(grafanaAzureADClientSecret)' # Refer√™ncia √† vari√°vel secreta

stages:
- stage: DeployMonitoring
  jobs:
  - job: Deploy
    steps:
    - task: AzureCLI@2
      displayName: 'üîê Criar Secret para Client Secret do Azure AD'
      inputs:
        azureSubscription: 'Terraform-automation'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e

          echo "üîë Criando Kubernetes Secret 'grafana-azuread-secret' no namespace '$(prometheusNamespace)'..."
          kubectl create secret generic grafana-azuread-secret \
            --namespace=$(prometheusNamespace) \
            --from-literal=client-secret="$AZUREADCLIENTSECRETVALUE" \
            --dry-run=client -o yaml | kubectl apply -f -
          echo "‚úÖ Secret criado com sucesso."
        environmentVariables:
          AZUREADCLIENTSECRETVALUE: $(azureADClientSecretValue)

    - task: AzureCLI@2
      displayName: '‚öôÔ∏è Criar ConfigMap para Configura√ß√£o do Grafana Azure AD'
      inputs:
        azureSubscription: 'Terraform-automation'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e

          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: grafana-azuread-config
            namespace: $(prometheusNamespace)
          data:
            grafana.ini: |
              [auth.azuread]
              enabled = true
              client_id = "$(azureADClientId)"
              client_secret = "$(CLIENT_SECRET)"
              tenant_id = "$(azureADTenantId)"
              auth_url = "https://login.microsoftonline.com/$(azureADTenantId)/oauth2/authorize"
              token_url = "https://login.microsoftonline.com/$(azureADTenantId)/oauth2/token"
              allowed_domains =
              allow_sign_up = true
              auto_login = false
              name = Azure AD
              role_attribute_path =
              groups_attribute_path =
              email_attribute_path =
              login_attribute_path =
          EOF
          echo "‚úÖ ConfigMap grafana-azuread-config criado com sucesso."

    - task: AzureCLI@2
      displayName: 'üîß Configurar AKS e instalar Prometheus/Grafana'
      inputs:
        azureSubscription: 'Terraform-automation'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e

          echo "üîê Garantindo permiss√µes de Cluster Admin..."
          az role assignment create \
            --assignee "$(objectId)" \
            --role "Azure Kubernetes Service Cluster Admin Role" \
            --scope /subscriptions/$(subscriptionId)/resourceGroups/$(aksResourceGroup)/providers/Microsoft.ContainerService/managedClusters/$(aksClusterName) \
            || echo "Permiss√£o j√° atribu√≠da ou j√° existente."

          echo "üîß Acessando o cluster AKS..."
          az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing

          echo "üîé Verificando contexto do kubectl..."
          kubectl config current-context
          kubectl cluster-info

          echo "üìÅ Criando namespace '$(prometheusNamespace)'..."
          kubectl create namespace $(prometheusNamespace) --dry-run=client -o yaml | kubectl apply -f -

          echo "üì¶ Adicionando reposit√≥rios Helm..."
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

          echo "üìà Instalando Prometheus..."
          helm upgrade --install prometheus prometheus-community/prometheus \
            --namespace $(prometheusNamespace) \
            --set server.service.type=LoadBalancer

          echo "üìä Instalando Grafana..."
          helm upgrade --install grafana grafana/grafana \
            --namespace $(prometheusNamespace) \
            --set adminPassword="$(grafanaAdminPassword)" \
            --set service.type=LoadBalancer \
            --set volumes='[{"name": "grafana-config", "configMap": {"name": "grafana-azuread-config"}}, {"name": "grafana-secrets", "secret": {"secretName": "grafana-azuread-secret"}}]' \
            --set volumeMounts='[{"name": "grafana-config", "mountPath": "/etc/grafana/grafana.ini", "subPath": "grafana.ini"}, {"name": "grafana-secrets", "mountPath": "/etc/grafana/grafana.ini", "subPath": "client-secret"}]'

          echo "‚è≥ Verificando recursos..."
          kubectl get all -n $(prometheusNamespace)